{"version":3,"sources":["useModal.js","Portal.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["useModal","useState","open","onOpenModal","close","onCloseModal","openModal","closeModal","Portal","children","modalRoot","document","getElementById","createElement","setAttribute","body","appendChild","modalElement","useEffect","removeChild","createPortal","Modal","render","style","display","justifyContent","alignItems","position","top","left","width","height","background","borderRadius","padding","minWidth","maxWidth","maxHeight","zIndex","boxShadow","marginBottom","onClick","opacity","App","console","log","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAkBeA,EAhBE,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACRC,EADQ,OAESF,oBAAS,GAFlB,mBAEdG,EAFc,KAEPC,EAFO,KAarB,MAAO,CAAEH,OAAME,QAAOE,UATJ,WAChBH,GAAY,IAQmBI,WALd,WACjBF,GAAa,GACbF,GAAY,MCSDK,EAlBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACZC,EAAYC,SAASC,eAAe,SAEnCF,KACHA,EAAYC,SAASE,cAAc,QACzBC,aAAa,KAAM,SAC7BH,SAASI,KAAKC,YAAYN,IAG5B,IAAMO,EAAeN,SAASE,cAAc,OAO5C,OALAK,qBAAU,WAER,OADAR,EAAUM,YAAYC,GACf,kBAAMP,EAAUS,YAAYF,OAG9BG,uBAAaX,EAAUQ,ICoCjBI,EAnDD,SAAC,GAAiC,IAA/BZ,EAA8B,EAA9BA,SAAUL,EAAoB,EAApBA,MAAOkB,EAAa,EAAbA,OAChC,OACE,kBAAC,EAAD,KACE,6BACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,SAGV,yBACER,MAAO,CACLI,SAAU,WACVK,WAAY,QACZC,aAAc,MACdC,QAAS,OACTC,SAAU,QACVC,SAAU,QACVC,UAAW,QACXC,OAAQ,GACRC,UAAW,kCACXC,aAAc,UAGflB,EAAOb,IAAaA,EACrB,6BACA,4BAAQgC,QAASrC,GAAjB,WAGJ,yBACEmB,MAAO,CACLI,SAAU,WACVG,MAAO,OACPC,OAAQ,OACRH,IAAK,EACLC,KAAM,EACNG,WAAY,QACZU,QAAS,S,MCzBNC,MAjBf,WAAgB,IAAD,EAC2B3C,IAAhCE,EADK,EACLA,KAAMI,EADD,EACCA,UAAWC,EADZ,EACYA,WAEzB,OADAqC,QAAQC,IAAI,cAEV,yBAAKC,UAAU,OACb,gDACA,4BAAQL,QAASnC,GAAjB,QACCJ,EACC,kBAAC,EAAD,CACEE,MAAOG,EACPe,OAAQ,kBAAM,iEAEd,OCLUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS9B,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASC,eAAe,SDyHpB,kBAAmB0C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.c198fb66.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst useModal = () => {\n  const [open, onOpenModal] = useState(false);\n  const [close, onCloseModal] = useState(false);\n\n  const openModal = () => {\n    onOpenModal(true);\n  };\n\n  const closeModal = () => {\n    onCloseModal(true);\n    onOpenModal(false);\n  };\n\n  return { open, close, openModal, closeModal };\n};\n\nexport default useModal;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Portal = ({ children }) => {\n  let modalRoot = document.getElementById(\"modal\");\n\n  if (!modalRoot) {\n    modalRoot = document.createElement(\"div\");\n    modalRoot.setAttribute(\"id\", \"modal\");\n    document.body.appendChild(modalRoot);\n  }\n\n  const modalElement = document.createElement(\"div\");\n\n  useEffect(() => {\n    modalRoot.appendChild(modalElement);\n    return () => modalRoot.removeChild(modalElement);\n  });\n\n  return createPortal(children, modalElement);\n};\nexport default Portal;\n","import React from \"react\";\n\nimport Portal from \"./Portal\";\n\nconst Modal = ({ children, close, render }) => {\n  return (\n    <Portal>\n      <div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        >\n          <div\n            style={{\n              position: \"relative\",\n              background: \"white\",\n              borderRadius: \"2px\",\n              padding: \"15px\",\n              minWidth: \"320px\",\n              maxWidth: \"600px\",\n              maxHeight: \"600px\",\n              zIndex: 10,\n              boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.3)\",\n              marginBottom: \"100px\",\n            }}\n          >\n            {render(children) || children}\n            <hr />\n            <button onClick={close}>Close</button>\n          </div>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            top: 0,\n            left: 0,\n            background: \"black\",\n            opacity: 0.5,\n          }}\n        />\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport useModal from \"./useModal\";\nimport Modal from \"./Modal\";\nimport \"./App.css\";\n\nfunction App() {\n  const { open, openModal, closeModal } = useModal();\n  console.log(\"render App\");\n  return (\n    <div className=\"App\">\n      <h1>Modals in React!</h1>\n      <button onClick={openModal}>Open</button>\n      {open ? (\n        <Modal\n          close={closeModal}\n          render={() => <h1>This is a Modal using Portals!</h1>}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}